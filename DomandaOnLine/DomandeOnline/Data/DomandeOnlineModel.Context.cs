//------------------------------------------------------------------------------
// <auto-generated>
//     Codice generato da un modello.
//
//     Le modifiche manuali a questo file potrebbero causare un comportamento imprevisto dell'applicazione.
//     Se il codice viene rigenerato, le modifiche manuali al file verranno sovrascritte.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DomandeOnline.Data
{
    using System;
    using System.Data.Entity;
	using System.Data.Entity.Core.Objects;
	using System.Data.Entity.Infrastructure;
	using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {



            var domanda = modelBuilder.Entity<DomandaPartecipazione>();
            domanda.ToTable("DomandaPartecipazione");

            domanda.HasOptional(x => x.Motivazione)
                .WithMany(x => x.DomandaPartecipazione)
                .HasForeignKey(x => x.IdMotivazione);

            domanda.HasOptional(x => x.MotivoAnnullamento)
                .WithMany(x => x.DomandaPartecipazione)
                .HasForeignKey(x => x.IdMotivazioneAnnullamento);

            domanda.HasOptional(x => x.Progetto)
                .WithMany(x => x.DomandePartecipazione)
                .HasForeignKey(x => new { x.CodiceProgettoSelezionato, x.CodiceSedeSelezionata });

            domanda.HasOptional(x => x.TitoloStudio)
                .WithMany(x => x.DomandaPartecipazione)
                .HasForeignKey(x => x.IdTitoloStudio);

            domanda.HasOptional(x => x.TitoloStudioEsperienze)
                .WithMany(x => x.DomandaPartecipazione1)
                .HasForeignKey(x => x.IdTitoloStudioEsperienze);


            var CV = modelBuilder.Entity<CV>();
            CV.ToTable("DomandaPartecipazione");
            CV.HasKey(x => x.Id);
            CV.HasRequired(x => x.Domanda)
                .WithRequiredPrincipal(x => x.CV);

            var Domanda = modelBuilder.Entity<Documento>();
            Domanda.ToTable("DomandaPartecipazione");
            Domanda.HasKey(x => x.Id);
            Domanda.HasRequired(x => x.DomandaPartecipazione)
                .WithRequiredPrincipal(x => x.Domanda);

            var ambito = modelBuilder.Entity<Ambito>();
            ambito.ToTable("SUSCN_DOL_AMBITO");
            ambito.HasKey(x=>x.IdAmbitoAzione);

            var bando = modelBuilder.Entity<Bando>();
            bando.ToTable("SUSCN_DOL_BANDOGRUPPO");
            bando.HasKey(x => x.Gruppo);

            var volontarioServizio = modelBuilder.Entity<VolontarioServizio>();
            volontarioServizio.ToTable("SUSCN_DOL_CODICE_FISCALE_VOLONTARIO");
            volontarioServizio.HasKey(x => new { 
                x.CodiceFiscale,
                x.DataInizioServizio,
                x.DataFineServizio,
                x.TipoServizio
            });

            var garanziaGiovani = modelBuilder.Entity<GaranziaGiovani>();
            garanziaGiovani.ToTable("SUSCN_DOL_GARANZIA_GIOVANI");
            garanziaGiovani.HasKey(x => x.IdTipoGG);

            var comuneProgetti = modelBuilder.Entity<ComuneProgetti>();
            comuneProgetti.ToTable("SUSCN_DOL_GEOGRAFICO_ITALIA");
            comuneProgetti.HasKey(x => new {
                x.REGIONE,
                x.PROVINCIA,
                x.COMUNE
            });

            var minoreOpportunita = modelBuilder.Entity<MinoreOpportunita>();
            minoreOpportunita.ToTable("SUSCN_DOL_MINORE_OPPORTUNITA");
            minoreOpportunita.HasKey(x => x.IDParticolarità);

            var Nazione = modelBuilder.Entity<Nazione>();
            Nazione.ToTable("Nazione");
            Nazione.HasKey(x => x.Id);

            var obiettivo = modelBuilder.Entity<Obiettivo>();
            obiettivo.ToTable("SUSCN_DOL_OBIETTIVO");
            obiettivo.HasKey(x => x.IdObiettivo);
            obiettivo.Property(x => x.Nome).HasColumnName("Obiettivo");
            obiettivo.HasMany(x => x.Programmi)
                .WithMany(x=>x.Obiettivi)
                .Map(m =>
                {
                    m.ToTable("SUSCN_DOL_OBIETTIVO_PROGRAMMA");
                    m.MapLeftKey("IdObiettivo");
                    m.MapRightKey("IdProgramma");
                });

            var programma = modelBuilder.Entity<Programma>();
            programma.ToTable("SUSCN_DOL_PROGRAMMA");
            programma.HasKey(x => x.IdProgramma);
            programma.HasRequired(x => x.Ambito)
                .WithMany(x => x.Programmi)
                .HasForeignKey(x => x.IdAmbitoAzione);
            programma.HasOptional(x => x.GaranziaGiovane)
                .WithMany(x => x.Programmi)
                .HasForeignKey(x => x.IdTipoGG);



            var progetto = modelBuilder.Entity<Progetto>();
            progetto.ToTable("SUSCN_DOL_PROGETTI_DISPONIBILI");
            progetto.HasKey(x => new {
                x.CodiceProgetto,
                x.CodiceSede
            });
            progetto.HasRequired(x => x.Bando)
                .WithMany(x => x.Progetti)
                .HasForeignKey(x => x.Gruppo);
            progetto.HasOptional(x => x.MinoreOpportunita)
                .WithMany(x => x.Progetti)
                .HasForeignKey(x => x.IDParticolaritàEntità);
            progetto.HasOptional(x => x.Programma)
                .WithMany(x => x.Progetti)
                .HasForeignKey(x => x.IdProgramma);

            var storicoprogetto = modelBuilder.Entity<SUSCN_DOL_STORICO_PROGETTI>();
            storicoprogetto.ToTable("SUSCN_DOL_STORICO_PROGETTI");
            storicoprogetto.HasKey(x => new {
                x.NomeEnte,
                x.CodiceProgetto,
                x.TitoloProgetto,
                x.TipoProgetto,
                x.CodiceSede,
                x.Regione,
                x.Comune,
                x.Settore,
                x.Area,
                x.Gruppo,
                x.Misure,
                x.DurataProgettoMesi,
                x.NumeroGiovaniMinoriOpportunità,
                x.EsteroUE,
                x.Tutoraggio
            });

            var codiceBelfiore = modelBuilder.Entity<CodiceBelfiore>();
            codiceBelfiore.ToTable("CodiceBelfiore");
            codiceBelfiore.HasKey(x => x.Codice);


            var comune = modelBuilder.Entity<Comune>();
            comune.ToTable("Comune");
            comune.HasKey(x => x.Id);
            comune.HasOptional(x => x.Provincia)
                .WithMany(x => x.Comune)
                .HasForeignKey(x => x.IdPRovincia);

            var configurazione = modelBuilder.Entity<Configurazione>();
            configurazione.ToTable("Configurazione");
            configurazione.HasKey(x => x.Nome);

            var domandaVariata = modelBuilder.Entity<DomandaVariata>();
            domandaVariata.ToTable("DomandaVariata");
            domandaVariata.HasKey(x => x.Id);

            var genere = modelBuilder.Entity<Genere>();
            genere.ToTable("Genere");
            genere.HasKey(x => x.Codice);

            var MotivoAnnullamento = modelBuilder.Entity<MotivoAnnullamento>();
            MotivoAnnullamento.ToTable("MotivoAnnullamento");
            MotivoAnnullamento.HasKey(x => x.Id);

            var Motivazione = modelBuilder.Entity<Motivazione>();
            Motivazione.ToTable("Motivazione");
            Motivazione.HasKey(x => x.Id);

            var ProgettoPreferito = modelBuilder.Entity<ProgettoPreferito>();
            ProgettoPreferito.ToTable("ProgettoPreferito");
            ProgettoPreferito.HasKey(x => new {
                x.CodiceFiscale,
                x.CodiceProgetto,
                x.CodiceSede,
            });
            ProgettoPreferito.HasRequired(x => x.Progetti)
                .WithMany(x => x.Preferiti)
                .HasForeignKey(x => new { x.CodiceProgetto, x.CodiceSede });

            var Provincia = modelBuilder.Entity<Provincia>();
            Provincia.ToTable("Provincia");
            Provincia.HasKey(x => x.Id);
            Provincia.HasOptional(x => x.Regione)
                .WithMany(x => x.Provincia)
                .HasForeignKey(x => x.idRegione);


            var RequisitiGaranziaGiovani = modelBuilder.Entity<RequisitiGaranziaGiovani>();
            RequisitiGaranziaGiovani.ToTable("RequisitiGaranziaGiovani");
            RequisitiGaranziaGiovani.HasRequired(x => x.Provincia)
                .WithMany(x => x.RequisitiGaranziaGiovani)
                .HasForeignKey(x => x.IdProvincia);
            RequisitiGaranziaGiovani.HasRequired(x => x.Regione)
                .WithMany(x => x.RequisitiGaranziaGiovani)
                .HasForeignKey(x => x.IdRegione);
            RequisitiGaranziaGiovani.HasKey(x => new {
                x.TipoGG,
                x.IdProvincia,
                x.IdRegione,
            });

            var RichiestaCredenziali = modelBuilder.Entity<RichiestaCredenziali>();
            RichiestaCredenziali.ToTable("RichiestaCredenziali");
            RichiestaCredenziali.HasKey(x => x.Id);
            RichiestaCredenziali.HasOptional(x => x.Stato)
                .WithMany(x => x.RichiestaCredenziali)
                .HasForeignKey(x => x.IdStato);
            RichiestaCredenziali.HasOptional(x => x.Genere)
                .WithMany(x => x.RichiestaCredenziali)
                .HasForeignKey(x => x.CodiceGenere);
            RichiestaCredenziali.HasOptional(x => x.NazioneNascita)
                .WithMany(x => x.RichiestaCredenziali)
                .HasForeignKey(x => x.IdNazioneNascita);
            RichiestaCredenziali.HasOptional(x => x.Cittadinanza)
                .WithMany(x => x.RichiestaCredenziali1)
                .HasForeignKey(x => x.IdNazioneCittadinanza);

            var Specializzazione = modelBuilder.Entity<Specializzazione>();
            Specializzazione.ToTable("Specializzazione");
            Specializzazione.HasKey(x => x.Id);

            var TitoloStudio = modelBuilder.Entity<TitoloStudio>();
            TitoloStudio.ToTable("TitoloStudio");
            TitoloStudio.HasKey(x => x.Id);


            var TokenCredenziali = modelBuilder.Entity<TokenCredenziali>();
            TokenCredenziali.ToTable("TokenCredenziali");
            TokenCredenziali.HasKey(x => x.Id);

            var VolontarioInterruzioneCovid = modelBuilder.Entity<VolontarioInterruzioneCovid>();
            VolontarioInterruzioneCovid.ToTable("SUSCN_DOL_VOLONTARIO_INTERRUZIONE_COVID");
            VolontarioInterruzioneCovid.HasKey(x => x.CodiceFiscale);


            var StatoRichiestaCredenziali = modelBuilder.Entity<StatoRichiestaCredenziali>();
            StatoRichiestaCredenziali.ToTable("StatoRichiestaCredenziali");
            StatoRichiestaCredenziali.HasKey(x => x.Id);

            var Regione = modelBuilder.Entity<Regione>();
            Regione.ToTable("Regione");
            Regione.HasKey(x => x.Id);


        }

        public virtual DbSet<Nazione> Nazione { get; set; }
        public virtual DbSet<StatoRichiestaCredenziali> StatoRichiestaCredenziali { get; set; }
        public virtual DbSet<Comune> Comune { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<Regione> Regione { get; set; }
        public virtual DbSet<Configurazione> Configurazione { get; set; }
        public virtual DbSet<Genere> Genere { get; set; }
        public virtual DbSet<RichiestaCredenziali> RichiestaCredenziali { get; set; }
        public virtual DbSet<TokenCredenziali> TokenCredenziali { get; set; }
        public virtual DbSet<ComuneProgetti> ComuneProgetti { get; set; }
        public virtual DbSet<Bando> Bando { get; set; }
        public virtual DbSet<ProgettoPreferito> ProgettoPreferito { get; set; }
        public virtual DbSet<CodiceBelfiore> CodiceBelfiore { get; set; }
        public virtual DbSet<Specializzazione> Specializzazione { get; set; }
        public virtual DbSet<TitoloStudio> TitoloStudio { get; set; }
        public virtual DbSet<Motivazione> Motivazione { get; set; }
        public virtual DbSet<DomandaPartecipazione> DomandaPartecipazione { get; set; }
        public virtual DbSet<SUSCN_DOL_STORICO_PROGETTI> SUSCN_DOL_STORICO_PROGETTI { get; set; }
        public virtual DbSet<MotivoAnnullamento> MotivoAnnullamento { get; set; }
        public virtual DbSet<Ambito> Ambito { get; set; }
        public virtual DbSet<Obiettivo> Obiettivo { get; set; }
        public virtual DbSet<RequisitiGaranziaGiovani> RequisitiGaranziaGiovani { get; set; }
        public virtual DbSet<GaranziaGiovani> GaranziaGiovani { get; set; }
        public virtual DbSet<Programma> Programma { get; set; }
        public virtual DbSet<VolontarioServizio> VolontarioServizio { get; set; }
        public virtual DbSet<Progetto> Progetto { get; set; }
        public virtual DbSet<MinoreOpportunita> MinoreOpportunita { get; set; }
        public virtual DbSet<VolontarioInterruzioneCovid> VolontarioInterruzioneCovid { get; set; }
        public virtual DbSet<DomandaVariata> DomandaVariata { get; set; }
        public virtual DbSet<CV> CV { get; set; }
        public virtual DbSet<Documento> Documento { get; set; }

        public virtual int SP_AnnullaDomanda(Nullable<int> idDomanda)
		{
			var idDomandaParameter = idDomanda.HasValue ?
				new ObjectParameter("IdDomanda", idDomanda) :
				new ObjectParameter("IdDomanda", typeof(int));

			return this.Database.ExecuteSqlCommand("EXEC SP_AnnullaDomanda @IdDomanda="+idDomanda);
		}
	}
}
