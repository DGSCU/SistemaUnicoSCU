'------------------------------------------------------------------------------
' <auto-generated>
'     Il codice è stato generato da uno strumento.
'     Versione runtime:4.0.30319.42000
'
'     Le modifiche apportate a questo file possono provocare un comportamento non corretto e andranno perse se
'     il codice viene rigenerato.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Il codice sorgente è stato generato automaticamente da Microsoft.VSDesigner, versione 4.0.30319.42000.
'
Namespace WS_SIGeD_Auth
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SIGED_AUTHSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class SIGED_AUTH
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SWS_NEWSESSIONOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SWS_CLOSESESSIONOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SWS_RENEWSESSIONOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SWS_STATUSSESSIONOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Futuro.My.MySettings.Default.Futuro_WS_SIGeD_Auth_SIGED_AUTH
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SWS_NEWSESSIONCompleted As SWS_NEWSESSIONCompletedEventHandler
        
        '''<remarks/>
        Public Event SWS_CLOSESESSIONCompleted As SWS_CLOSESESSIONCompletedEventHandler
        
        '''<remarks/>
        Public Event SWS_RENEWSESSIONCompleted As SWS_RENEWSESSIONCompletedEventHandler
        
        '''<remarks/>
        Public Event SWS_STATUSSESSIONCompleted As SWS_STATUSSESSIONCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SWS_NEWSESSION", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SWS_NEWSESSION(ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWORD As String) As String
            Dim results() As Object = Me.Invoke("SWS_NEWSESSION", New Object() {FIRSTNAME, LASTNAME, PASSWORD})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SWS_NEWSESSIONAsync(ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWORD As String)
            Me.SWS_NEWSESSIONAsync(FIRSTNAME, LASTNAME, PASSWORD, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SWS_NEWSESSIONAsync(ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWORD As String, ByVal userState As Object)
            If (Me.SWS_NEWSESSIONOperationCompleted Is Nothing) Then
                Me.SWS_NEWSESSIONOperationCompleted = AddressOf Me.OnSWS_NEWSESSIONOperationCompleted
            End If
            Me.InvokeAsync("SWS_NEWSESSION", New Object() {FIRSTNAME, LASTNAME, PASSWORD}, Me.SWS_NEWSESSIONOperationCompleted, userState)
        End Sub
        
        Private Sub OnSWS_NEWSESSIONOperationCompleted(ByVal arg As Object)
            If (Not (Me.SWS_NEWSESSIONCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SWS_NEWSESSIONCompleted(Me, New SWS_NEWSESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SWS_CLOSESESSION", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SWS_CLOSESESSION(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String) As String
            Dim results() As Object = Me.Invoke("SWS_CLOSESESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SWS_CLOSESESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String)
            Me.SWS_CLOSESESSIONAsync(IDSESSION, FIRSTNAME, LASTNAME, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SWS_CLOSESESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal userState As Object)
            If (Me.SWS_CLOSESESSIONOperationCompleted Is Nothing) Then
                Me.SWS_CLOSESESSIONOperationCompleted = AddressOf Me.OnSWS_CLOSESESSIONOperationCompleted
            End If
            Me.InvokeAsync("SWS_CLOSESESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME}, Me.SWS_CLOSESESSIONOperationCompleted, userState)
        End Sub
        
        Private Sub OnSWS_CLOSESESSIONOperationCompleted(ByVal arg As Object)
            If (Not (Me.SWS_CLOSESESSIONCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SWS_CLOSESESSIONCompleted(Me, New SWS_CLOSESESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SWS_RENEWSESSION", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SWS_RENEWSESSION(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWOR As String) As String
            Dim results() As Object = Me.Invoke("SWS_RENEWSESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME, PASSWOR})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SWS_RENEWSESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWOR As String)
            Me.SWS_RENEWSESSIONAsync(IDSESSION, FIRSTNAME, LASTNAME, PASSWOR, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SWS_RENEWSESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal PASSWOR As String, ByVal userState As Object)
            If (Me.SWS_RENEWSESSIONOperationCompleted Is Nothing) Then
                Me.SWS_RENEWSESSIONOperationCompleted = AddressOf Me.OnSWS_RENEWSESSIONOperationCompleted
            End If
            Me.InvokeAsync("SWS_RENEWSESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME, PASSWOR}, Me.SWS_RENEWSESSIONOperationCompleted, userState)
        End Sub
        
        Private Sub OnSWS_RENEWSESSIONOperationCompleted(ByVal arg As Object)
            If (Not (Me.SWS_RENEWSESSIONCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SWS_RENEWSESSIONCompleted(Me, New SWS_RENEWSESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SWS_STATUSSESSION", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SWS_STATUSSESSION(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String) As String
            Dim results() As Object = Me.Invoke("SWS_STATUSSESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SWS_STATUSSESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String)
            Me.SWS_STATUSSESSIONAsync(IDSESSION, FIRSTNAME, LASTNAME, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SWS_STATUSSESSIONAsync(ByVal IDSESSION As String, ByVal FIRSTNAME As String, ByVal LASTNAME As String, ByVal userState As Object)
            If (Me.SWS_STATUSSESSIONOperationCompleted Is Nothing) Then
                Me.SWS_STATUSSESSIONOperationCompleted = AddressOf Me.OnSWS_STATUSSESSIONOperationCompleted
            End If
            Me.InvokeAsync("SWS_STATUSSESSION", New Object() {IDSESSION, FIRSTNAME, LASTNAME}, Me.SWS_STATUSSESSIONOperationCompleted, userState)
        End Sub
        
        Private Sub OnSWS_STATUSSESSIONOperationCompleted(ByVal arg As Object)
            If (Not (Me.SWS_STATUSSESSIONCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SWS_STATUSSESSIONCompleted(Me, New SWS_STATUSSESSIONCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub SWS_NEWSESSIONCompletedEventHandler(ByVal sender As Object, ByVal e As SWS_NEWSESSIONCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SWS_NEWSESSIONCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub SWS_CLOSESESSIONCompletedEventHandler(ByVal sender As Object, ByVal e As SWS_CLOSESESSIONCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SWS_CLOSESESSIONCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub SWS_RENEWSESSIONCompletedEventHandler(ByVal sender As Object, ByVal e As SWS_RENEWSESSIONCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SWS_RENEWSESSIONCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0")>  _
    Public Delegate Sub SWS_STATUSSESSIONCompletedEventHandler(ByVal sender As Object, ByVal e As SWS_STATUSSESSIONCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.81.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SWS_STATUSSESSIONCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
